import { NextResponse } from 'next/server';import { connectToDb } from '../../../../lib/server/connection';import { database } from '../../../components/other/variables';import { ObjectId } from 'mongodb';export async function POST(req) {  const { product_Id, user_id } = await req.json();  if (!ObjectId.isValid(product_Id) || !ObjectId.isValid(user_id)) {    return NextResponse.json({ error: 'Vous devez vous connecter d\'abord.' }, { status: 400 });  }  try {    const client = await connectToDb();    const db = client.db(database);    const usersCollection = db.collection('Users');    const product = await db.collection('Products').findOne({ _id: new ObjectId(product_Id) });    if (!product) {      client.close();      return NextResponse.json({ error: 'Produit introuvable.' }, { status: 404 });    }    const user = await usersCollection.findOne({ _id: new ObjectId(user_id) });    if (!user) {      client.close();      return NextResponse.json({ error: 'Utilisateur introuvable.' }, { status: 404 });    }    const isFavorite = user.favorite.some(fav => fav._id.toString() === product_Id);    if (isFavorite) {      client.close();      return NextResponse.json({ error: 'Le produit est déjà dans les favoris.' }, { status: 400 });    }    user.favorite.push(product);    const result = await usersCollection.updateOne(      { _id: new ObjectId(user_id) },      { $set: { favorite: user.favorite } }    );    client.close();    if (result.modifiedCount === 0) {      return NextResponse.json({ error: 'Utilisateur introuvable.' }, { status: 404 });    }    return NextResponse.json({ message: 'Produit ajouté aux favoris.', favorite: user.favorite }, { status: 200 });  } catch (error) {    console.error('Erreur lors de la mise à jour des favoris:', error);    return NextResponse.json({ error: 'Problème lors de la mise à jour des favoris.' }, { status: 500 });  }}